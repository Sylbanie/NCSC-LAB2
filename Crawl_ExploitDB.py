import sys, json, bs4
import requests
from PyInquirer import style_from_dict, Token, prompt, Separator
from bs4 import BeautifulSoup
from requests_html import HTMLSession
from prettytable import PrettyTable
from pyfiglet import Figlet
import html.parser
import argparse

ROOT_URL = "https://www.exploit-db.com"
SEARCH_URL = ROOT_URL + "/search"
VERIFIED_EXPLOITS_URL = SEARCH_URL+"?verified=true&q="
NON_VERIFIED_EXPLOITS_URL = SEARCH_URL+"?verified=false&q="

def parse_exploits_to_list(response):
    data = []
    try:
        data = json.loads(response)["data"]
    except Exception:
        print("ERROR: No data in dictionary, its either network error or they changed site")
        return None

    data = data["data"]
    exploits = []
    for i in range(0, len(data)):
        exploits.append(data[i]["id"] + "," + data[i]["description"][1] + "," + data[i]["date_published"] + "," + data[i]["author"]["name"] + "," + data[i]["type_id"] + " " + data[i]["platform_id"])

    return exploits

def find(page_num):
    start = str(15*(page_num - 1))
    param = "/?draw=1&columns%5B0%5D%5Bdata%5D=date_published&columns%5B0%5D%5Bname%5D=date_published&columns%5B0%5D%5Bsearchable%5D=true&columns%5B0%5D%5Borderable%5D=true&columns%5B0%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B0%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B1%5D%5Bdata%5D=download&columns%5B1%5D%5Bname%5D=download&columns%5B1%5D%5Bsearchable%5D=false&columns%5B1%5D%5Borderable%5D=false&columns%5B1%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B1%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B2%5D%5Bdata%5D=application_md5&columns%5B2%5D%5Bname%5D=application_md5&columns%5B2%5D%5Bsearchable%5D=true&columns%5B2%5D%5Borderable%5D=false&columns%5B2%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B2%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B3%5D%5Bdata%5D=verified&columns%5B3%5D%5Bname%5D=verified&columns%5B3%5D%5Bsearchable%5D=true&columns%5B3%5D%5Borderable%5D=false&columns%5B3%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B3%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B4%5D%5Bdata%5D=description&columns%5B4%5D%5Bname%5D=description&columns%5B4%5D%5Bsearchable%5D=true&columns%5B4%5D%5Borderable%5D=false&columns%5B4%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B4%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B5%5D%5Bdata%5D=type_id&columns%5B5%5D%5Bname%5D=type_id&columns%5B5%5D%5Bsearchable%5D=true&columns%5B5%5D%5Borderable%5D=false&columns%5B5%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B5%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B6%5D%5Bdata%5D=platform_id&columns%5B6%5D%5Bname%5D=platform_id&columns%5B6%5D%5Bsearchable%5D=true&columns%5B6%5D%5Borderable%5D=false&columns%5B6%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B6%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B7%5D%5Bdata%5D=author_id&columns%5B7%5D%5Bname%5D=author_id&columns%5B7%5D%5Bsearchable%5D=false&columns%5B7%5D%5Borderable%5D=false&columns%5B7%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B7%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B8%5D%5Bdata%5D=code&columns%5B8%5D%5Bname%5D=code.code&columns%5B8%5D%5Bsearchable%5D=true&columns%5B8%5D%5Borderable%5D=true&columns%5B8%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B8%5D%5Bsearch%5D%5Bregex%5D=false&columns%5B9%5D%5Bdata%5D=id&columns%5B9%5D%5Bname%5D=id&columns%5B9%5D%5Bsearchable%5D=false&columns%5B9%5D%5Borderable%5D=true&columns%5B9%5D%5Bsearch%5D%5Bvalue%5D=&columns%5B9%5D%5Bsearch%5D%5Bregex%5D=false&order%5B0%5D%5Bcolumn%5D=9&order%5B0%5D%5Bdir%5D=desc&start=" + start + "&length=15&search%5Bvalue%5D=&search%5Bregex%5D=false&author=&port=&type=&tag=&platform=&_=1620382808595"
    headers = {
            "Host": "www.exploit-db.com",
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:88.0) Gecko/20100101 Firefox/88.0",
        "Accept": "application/json, text/javascript, */*; q=0.01",
        "Accept-Language": "vi-VN,vi;q=0.8,en-US;q=0.5,en;q=0.3",
        "Accept-Encoding": "gzip, deflate, br",
        "Referer": "https://www.exploit-db.com/",
        "X-Requested-With": "XMLHttpRequest",
        "Connection": "keep-alive",
        "Cookie": "CookieConsent={stamp:%27-1%27%2Cnecessary:true%2Cpreferences:true%2Cstatistics:true%2Cmarketing:true%2Cver:1%2Cutc:1620890445974%2Cregion:%27VN%27}; _ga=GA1.3.1348589044.1620890446; _gid=GA1.3.1657725682.1620890446; XSRF-TOKEN=eyJpdiI6ImUySUxxY0k4RkVSbDk3cUtLcnNVMFE9PSIsInZhbHVlIjoiNXFOVWFjMmh0OUFTMDl3enI1TjBJODhrS0szNEtqSWNwWGR0VU92OEJlN21WUCtvQVhhdW56VDhkOFEzV2RHaSIsIm1hYyI6ImUyOWYxYjkyZTA5YjUyOTBlMjQ3YjViNzYwN2Q5N2E1OGJmMjk4YTFhYmVlMjRlZGE1Yjc4NTg5MTUwYzhmNTUifQ%3D%3D; exploit_database_session=eyJpdiI6Ino0QnkzRWZFMHJpemlrbUI1TnIzalE9PSIsInZhbHVlIjoiV25HbzY0bEFxUWpRbnpNQ0ZXQTVUUm8rTGhSQ3NnT0NwK0o4VU44TjYrSW5IbTdidUtmN0h6Nk9vQlU1ZVBtYSIsIm1hYyI6IjdmMTY2NzM0MzBiYzIwMWYwZTZmMzYxZGNhZTc0YTJhOGNkNjIyNzJlOTFlMGQzY2UxMTM3Y2M3MmRmZjkzNmIifQ%3D%3D; _gat=1",
        "TE": "Trailers"
    }

    param = param.replace("%5B", "[")
    param = param.replace("%5D", "]")

    param = param.split("&")
    param.pop(0)
    params = {"draw" : "1"}
    for pr in param:
        pr = pr.split("=")
        params[pr[0]] = pr[1]

def get_exploits_list(page_num):
    exploits = {}
    exploits_data = find(page_num)
    
    for i in range(0, len(field_names)):
        datas = []
        for j in range(0, len(exploits_data)):
            data = exploits_data[j].split(",")
            datas.append(html.unescape(data[i]))
        exploits[field_names[i]] = datas
    return exploits

def Display_exploit_detail(exploit_id):
    session = HTMLSession()
    exploits_info = {}
    exploit_url = ROOT_URL + "exploits/" + exploit_id
    exploit_info = session.get(exploit_url)
    soup = BeautifulSoup(exploit_info.content, 'html.parser')
    
    return html.unescape(soup.find("code").text)

f = Figlet(font="5lineoblique")
print(f.renderText("ExploitDB Crawler"))

guideline_table = PrettyTable()
guideline_table.field_names = ["Command", "Description"]
guideline_table.add_row(["--page_num <PAGE_NUM>", "Display exploits with given page <num>"])
guideline_table.add_row(["--exploit_id <ID>", "Display exploit with given <id>"])
guideline_table.add_row(["--exit", "Exit"])

field_names = ['Id', 'Description', 'Date', 'Author', 'Platform']

parser = argparse.ArgumentParser()
parser.add_argument("--page_num", "-PAGE NUM", type=int,
                    help="Display exploits in page <num> and choose exploit")
parser.add_argument("--exploit_id" , "-EXPLOIT_ID",
                    help="Display exploit with given id")
args = parser.parse_args()

user_input = ""
print("========================================================================================================================")
while True:
    user_input = user_input.split(" ")
    if args.page_num or user_input[0] == "--page_num":
        if args.page_num:
            page_num = args.page_num
        else:
            page_num = int(user_input[1])
        total_pages = 2935
        while True:
            print("[+] Loading..")
            i = 0
            exploits_table = PrettyTable()
            exploits_list = get_exploits_list(page_num)
            for cat in field_names:
                exploits_table.add_column(field_names[i], exploits_list[cat], align="c")
                i+=1
            print(exploits_table) 
                                        
            next = str(input("Page %s / %s. Do you want to go to next page?(Yes/No)" % (page_num, total_pages)))
            if next == "Yes":
                page_num+=1;
            elif next == "No":
                args.page_num = False
                user_input = input(">>>")
                break
            else: 
                user_input = " "
                args.page_num = False
                break
            
    elif user_input[0] == "--exit":
        print("Quitting..")
        break
        
    elif args.exploit_id or user_input[0]=="--exploit_id":
        if args.exploit_id:
            exploit_id = args.exploit_id
        else:
            exploit_id = user_input[1]
        print("Wait...")
        print(Display_exploit_detail(exploit_id))
        args.exploit_id = False
        user_input = input("[Input]")
        
    else:
        print(("Commands list:").upper())
        print(guideline_table)
        user_input = input("[Input]")
        
